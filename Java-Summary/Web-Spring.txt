Spring优点:
----1.降低了组件之间的耦合性 ，实现了软件各层之间的解耦 
	2.可以使用容易提供的众多服务，如事务管理，消息服务等 
	3.容器提供单例模式支持 
	4.容器提供了AOP技术，利用它很容易实现如权限拦截，运行期监控等功能 
	5.容器提供了众多的辅助类，能加快应用的开发 
	6.spring对于主流的应用框架提供了集成支持，如hibernate，JPA，Struts等 
	7.spring属于低侵入式设计，代码的污染极低 
	8.独立于各种应用服务器 
	9.spring的DI机制降低了业务对象替换的复杂性 
	10.Spring的高度开放性，并不强制应用完全依赖于Spring，开发者可以自由选择spring 的部分或全部 

spring中的核心类:
----BeanFactory：产生一个新的实例，可以实现单例模式
	BeanWrapper：提供统一的get及set方法
	ApplicationContext:提供框架的实现，包括BeanFactory的所有功能 
||||依赖注入的三种方式：（1）接口注入（2）Construct注入（3）Setter注入||||

springMVC的流程:
----1.用户发送请求至前端控制器DispatcherServlet
	2.DispatcherServlet收到请求调用HandlerMapping处理器映射器。
	3.处理器映射器根据请求url找到具体的处理器，生成处理器对象及处理器拦截器(如果有则生成)一并返回给DispatcherServlet。
	4.DispatcherServlet通过HandlerAdapter处理器适配器调用处理器
	5.执行处理器(Controller，也叫后端控制器)。
	6.Controller执行完成返回ModelAndView
	7.HandlerAdapter将controller执行结果ModelAndView返回给DispatcherServlet
	8.DispatcherServlet将ModelAndView传给ViewReslover视图解析器
	9.ViewReslover解析后返回具体View
	10.DispatcherServlet对View进行渲染视图（即将模型数据填充至视图中）。
	11.DispatcherServlet响应用户
_______________________________________________________________________________________________________	
| MVC:(框架模式)
| ----MVC全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，
|	一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，
|	将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，
|	不需要重新编写业务逻辑。
|	MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。
| ****MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。
|	C存在的目的则是确保M和V的同步，一旦M改变，V应该同步更新。
| ====MVC 分层有助于管理复杂的应用程序，因为您可以在一个时间内专门关注一个方面。
|	例如，您可以在不依赖业务逻辑的情况下专注于视图设计。同时也让应用程序的测试更加容易。
|	MVC 分层同时也简化了分组开发。不同的开发人员可同时开发视图、控制器逻辑和业务逻辑
|
| 框架和模式的区别:
| ----框架通常是代码重用，而设计模式是设计重用，
|	架构则介于两者之间，部分代码重用，部分设计重用，有时分析也可重用。
|	设计模式是对在某种环境中反复出现的问题以及解决该问题的方案的描述，
|	它比框架更抽象；
|	框架可以用代码表示，也能直接执行或复用，而对模式而言只有实例才能用代码表示;
|	设计模式是比框架更小的元素，一个框架中往往含有一个或多个设计模式，
|	框架总是针对某一特定应用领域，但同一模式却可适用于各种应用。
|	可以说，框架是软件，而设计模式是软件的知识。
|
| 优点:耦合性低/重用性高/生命周期成本低/部署快/可维护性高/有利软件工程化管理
|
| 缺点:没有明确的定义/不适合小型，中等规模的应用程序/增加系统结构和实现的复杂性/
| 		视图与控制器间的过于紧密的连接/视图对模型数据的低效率访问/一般高级的界面工具或构造器不支持模式
|_______________________________________________________________________________________________________
	
IOC:
----Inversion of Control控制反转。当某个角色需要另外一个角色协助的时候，
	在传统的程序设计过程中，通常由调用者来创建被调用者的实例对象。
	但在spring中创建被调用者的工作不再由调用者来完成，因此称为控制反转。
	创建被调用者的工作由spring来完成，然后注入调用者 直接使用。


AOP:
----Aspect Oriented Programming面向切面编程；用来封装横切关注点
优点：1.各个步骤之间的良好隔离性耦合性大大降低 
      2.源代码无关性，再扩展功能的同时不对源码进行修改操作
	
DI:依赖注入是一个IOC的特殊实现，依赖注入是指一个对象应用另外一个对象来提供一个特殊的能力		[_IOC-_IOC-_IOC-_IOC-_IOC-_IOC-_IOC-_IOC-_IOC-_IOC-_IOC-_IOC-]

	
Factory:

Filter:

Transaction: